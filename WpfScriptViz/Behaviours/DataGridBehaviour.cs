using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interactivity;

namespace ScriptViz.Behaviours
{
    /// <inheritdoc/>
    /// <summary>
    /// 
    /// </summary>
    public class DataGridBehaviour : Behavior<DataGrid>
    {
        /// <summary>
        /// Dictionary&lt;currentIndex, desiredIndex&gt; A list representing the desired order in which to place the columns.
        /// </summary>
        private Dictionary<string,int?> _columnOrder;

        /// <inheritdoc />
        /// <summary>
        /// Custom Comparer which treats null as being greater than any other object.
        /// </summary>
        private class NullComparer<T> : IComparer<T>
        {
            public int Compare(T x, T y)
            {
                if (x == null && y == null)
                    return 0;

                if (x == null)
                    return 1;

                if (y == null)
                    return -1;

                return new CaseInsensitiveComparer().Compare(x, y);
            }
        }

        protected override void OnAttached()
        {
            _columnOrder = new Dictionary<string, int?>();

            AssociatedObject.AutoGeneratingColumn += OnAutoGeneratingColumn;
            AssociatedObject.AutoGeneratedColumns += OnAutoGeneratedColumns;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.AutoGeneratingColumn -= OnAutoGeneratingColumn;
            AssociatedObject.AutoGeneratedColumns -= OnAutoGeneratedColumns;
        }

        protected void OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            // Manipulate Column

            if (!(e.PropertyDescriptor is PropertyDescriptor pd)) return;

            // If Browsable Attribute is false, don't show this column.
            if (!pd.IsBrowsable)
            {
                e.Cancel = true;
                return;
            }

            if (pd.DisplayName != e.PropertyName)
            {
                e.Column.Header = pd.DisplayName;
            }

            if (pd.Description != "")
            {
                var tooltipSetter = new Setter(FrameworkElement.ToolTipProperty, pd.Description);

                if (e.Column.CellStyle == null)
                {
                    var style = new Style(typeof(DataGridCell));
                    style.Setters.Add(tooltipSetter);
                    e.Column.CellStyle = style;
                }
                else
                    e.Column.CellStyle.Setters.Add(tooltipSetter);
            }

            // DETERMINE ORDER OF COLUMNS

            // get any DisplayAttributes from the property
            var p = pd.Attributes.OfType<DisplayAttribute>();
            // Store DisplayAttributes in a list
            var displayAttributes = p as DisplayAttribute[] ?? p.ToArray();
            var attr = displayAttributes.Any() ? displayAttributes[0] : null;
            
            // store its Order attribute's value if it has one.
            
            var key = (string)e.Column.Header;
            var value = attr?.GetOrder();

            _columnOrder.Add(key, value);
        }

        private void OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            var dg = (DataGrid) sender;
            var colCount = dg.Columns.Count;

            // Sort the Dictionary entries
            var normalizedSortedColumnOrders = 
                _columnOrder
                    .OrderBy(f => f.Value, new NullComparer<int?>())
                    .Select(sortedOrder => sortedOrder.Key).ToList();

            // Set the order of the columns
            for (var i=0; i < colCount; i++)
            {
                var column = dg.Columns.Where(col => (string) col.Header == normalizedSortedColumnOrders[i]).ToList()[0];

                // if the property was assigned an Order, move the column to its proper place
                if (column.DisplayIndex != i)
                    column.DisplayIndex = i;
            } // end of for

            // reset the _columnOrder list for next use
            _columnOrder = new Dictionary<string, int?>();

        } // end of method
    } // end of class
} // end of namespace
